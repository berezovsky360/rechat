const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const axios = require('axios');
const path = require('path');
const helmet = require('helmet');

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const PORT = process.env.PORT || 5000;
const RAILWAY_PUBLIC_DOMAIN = process.env.RAILWAY_PUBLIC_DOMAIN || '';
const DEMO_MODE = process.env.DEMO_MODE === 'true';
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const N8N_API_URL = process.env.N8N_API_URL;
const N8N_AUTH_TOKEN = process.env.N8N_AUTH_TOKEN;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏
console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –≤ ${DEMO_MODE ? '–î–ï–ú–û' : '–ü–û–í–ù–û–ú–£'} —Ä–µ–∂–∏–º—ñ`);
console.log(`–ü–æ—Ä—Ç: ${PORT}`);
console.log(`Railway Domain: ${RAILWAY_PUBLIC_DOMAIN}`);

const app = express();

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Helmet –¥–ª—è –±–µ–∑–ø–µ–∫–∏
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'", "'unsafe-inline'", "'unsafe-eval'", "'wasm-unsafe-eval'", "'inline-speculation-rules'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:"],
      connectSrc: ["'self'", "https://api.openai.com", "https://api.openrouter.ai", "https://*.n8n.cloud", "*"],
      workerSrc: ["'self'", "blob:"]
    }
  },
  crossOriginEmbedderPolicy: false,
  crossOriginResourcePolicy: { policy: "cross-origin" }
}));

// Middleware
app.use(cors());
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));

// –ë–∞–∑–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç–∏ API
app.get('/api/health', (req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    message: 'API –ø—Ä–∞—Ü—é—î', 
    mode: DEMO_MODE ? 'demo' : 'full',
    version: '1.0.0'
  });
});

// –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ n8n
app.get('/api/n8n/templates', async (req, res) => {
  try {
    if (DEMO_MODE) {
      // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
      const mockTemplates = Array.from({ length: 71 }, (_, i) => ({
        id: `template-${i + 1}`,
        name: `–®–∞–±–ª–æ–Ω —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É ${i + 1}`,
        description: `–û–ø–∏—Å —à–∞–±–ª–æ–Ω—É —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É ${i + 1}. –¶–µ–π —à–∞–±–ª–æ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ n8n –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –∑–∞–¥–∞—á.`,
        category: ['ai', 'secops', 'sales', 'itops', 'marketing'][Math.floor(Math.random() * 5)],
        nodes: Math.floor(Math.random() * 10) + 2,
        author: 'n8n Team',
        createdAt: new Date().toISOString()
      }));
      
      return res.status(200).json({ success: true, data: mockTemplates });
    }
    
    // –í –ø–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API n8n
    const response = await axios.get(`${N8N_API_URL}/templates`, {
      headers: {
        'Authorization': `Bearer ${N8N_AUTH_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    res.status(200).json({ success: true, data: response.data });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—ñ–≤ n8n:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—ñ–≤' });
  }
});

app.post('/api/n8n/workflow', async (req, res) => {
  try {
    const { workflowData } = req.body;
    
    if (!workflowData) {
      return res.status(400).json({ success: false, message: '–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É' });
    }
    
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –≤ n8n
    // –ü–æ–∫–∏ —â–æ —ñ–º—ñ—Ç—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    
    res.status(201).json({ 
      success: true, 
      message: '–†–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ', 
      workflowId: `wf-${Date.now()}` 
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É n8n:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ OpenRouter
app.get('/api/openrouter/models', async (req, res) => {
  try {
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –∑ OpenRouter
    // –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    const mockModels = [
      { id: 'gpt-3.5-turbo', name: 'GPT-3.5 Turbo', price: '–¥–µ—à–µ–≤–∞', type: '–º–æ–≤–Ω–∞', country: 'üá∫üá∏', company: 'OpenAI' },
      { id: 'gpt-4', name: 'GPT-4', price: '–¥–æ—Ä–æ–≥–∞', type: '–¥—É–º–∞—é—á–∞', country: 'üá∫üá∏', company: 'OpenAI' },
      { id: 'claude-3-opus', name: 'Claude 3 Opus', price: '–¥–æ—Ä–æ–≥–∞', type: '–¥—É–º–∞—é—á–∞', country: 'üá∫üá∏', company: 'Anthropic' },
      { id: 'claude-3-sonnet', name: 'Claude 3 Sonnet', price: '–¥–æ—Å—Ç—É–ø–Ω–∞', type: '–¥—É–º–∞—é—á–∞', country: 'üá∫üá∏', company: 'Anthropic' },
      { id: 'claude-3-haiku', name: 'Claude 3 Haiku', price: '–¥–µ—à–µ–≤–∞', type: '–º–æ–≤–Ω–∞', country: 'üá∫üá∏', company: 'Anthropic' },
      { id: 'llama-3-70b', name: 'Llama 3 70B', price: '–¥–æ—Å—Ç—É–ø–Ω–∞', type: '–¥—É–º–∞—é—á–∞', country: 'üá∫üá∏', company: 'Meta' },
      { id: 'gemini-pro', name: 'Gemini Pro', price: '–¥–µ—à–µ–≤–∞', type: '–º–æ–≤–Ω–∞', country: 'üá∫üá∏', company: 'Google' },
      { id: 'gemini-ultra', name: 'Gemini Ultra', price: '–¥–æ—Ä–æ–≥–∞', type: '–¥—É–º–∞—é—á–∞', country: 'üá∫üá∏', company: 'Google' },
      { id: 'mistral-large', name: 'Mistral Large', price: '–¥–æ—Å—Ç—É–ø–Ω–∞', type: '–¥—É–º–∞—é—á–∞', country: 'üá´üá∑', company: 'Mistral AI' },
      { id: 'mistral-small', name: 'Mistral Small', price: '–¥–µ—à–µ–≤–∞', type: '–º–æ–≤–Ω–∞', country: 'üá´üá∑', company: 'Mistral AI' },
      { id: 'yi-large', name: 'Yi Large', price: '–¥–æ—Å—Ç—É–ø–Ω–∞', type: '–¥—É–º–∞—é—á–∞', country: 'üá®üá≥', company: '01.AI' },
      { id: 'qwen-72b', name: 'Qwen 72B', price: '–¥–æ—Å—Ç—É–ø–Ω–∞', type: '–¥—É–º–∞—é—á–∞', country: 'üá®üá≥', company: 'Alibaba' },
    ];
    
    res.status(200).json({ success: true, data: mockModels });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π OpenRouter:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π' });
  }
});

app.post('/api/chat/completion', async (req, res) => {
  try {
    const { prompt, model } = req.body;
    
    if (!prompt) {
      return res.status(400).json({ success: false, message: '–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É' });
    }
    
    if (DEMO_MODE) {
      // –í –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ —ñ–º—ñ—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      const mockResponse = {
        id: `chat-${Date.now()}`,
        text: '–Ø —Å—Ç–≤–æ—Ä–∏–≤ —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å –¥–ª—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –û—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç:',
        steps: [
          '–°—Ç–≤–æ—Ä—é—é –Ω–æ–¥—É –¥–ª—è HTTP Request',
          '–ù–∞–ª–∞—à—Ç–æ–≤—É—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É',
          '–î–æ–¥–∞—é –Ω–æ–¥—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
          '–ó\'—î–¥–Ω—É—é –Ω–æ–¥–∏ –º—ñ–∂ —Å–æ–±–æ—é'
        ],
        json: {
          "nodes": [
            {
              "parameters": {
                "url": "https://api.example.com/data",
                "authentication": "basicAuth",
                "method": "GET",
                "options": {}
              },
              "name": "HTTP Request",
              "type": "n8n-nodes-base.httpRequest",
              "typeVersion": 1,
              "position": [
                250,
                300
              ]
            },
            {
              "parameters": {
                "conditions": {
                  "string": [
                    {
                      "value1": "={{ $json.status }}",
                      "operation": "equal",
                      "value2": "success"
                    }
                  ]
                }
              },
              "name": "IF",
              "type": "n8n-nodes-base.if",
              "typeVersion": 1,
              "position": [
                450,
                300
              ]
            }
          ],
          "connections": {
            "HTTP Request": {
              "main": [
                [
                  {
                    "node": "IF",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          }
        }
      };
      
      // –Ü–º—ñ—Ç—É—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      setTimeout(() => {
        res.status(200).json({ success: true, data: mockResponse });
      }, 1000);
    } else {
      // –í –ø–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ —Ä–æ–±–∏–º–æ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ OpenRouter API
      const openRouterUrl = 'https://api.openrouter.ai/api/v1/chat/completions';
      const selectedModel = model || 'gpt-3.5-turbo'; // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      
      const response = await axios.post(openRouterUrl, {
        model: selectedModel,
        messages: [
          {
            role: 'system',
            content: '–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ n8n, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î —Ä–æ–±–æ—á—ñ –ø—Ä–æ—Ü–µ—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –î–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –∑ –ø–æ–ª—è–º–∏ text, steps, —ñ json, –¥–µ json –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É n8n.'
          },
          {
            role: 'user',
            content: prompt
          }
        ]
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
          'HTTP-Referer': 'https://rechat-app.com'
        }
      });
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API
      const aiResponse = response.data.choices[0].message.content;
      let parsedResponse;
      
      try {
        // –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        parsedResponse = JSON.parse(aiResponse);
      } catch (err) {
        // –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ, —Å—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        parsedResponse = {
          text: aiResponse,
          steps: ['–û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI'],
          json: { nodes: [], connections: {} }
        };
      }
      
      res.status(200).json({ 
        success: true, 
        data: {
          id: response.data.id,
          ...parsedResponse
        } 
      });
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ —á–∞—Ç—É:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ —á–∞—Ç—É' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é —Ç–∞ –ª–æ–≥–∞–º–∏
app.get('/api/history', (req, res) => {
  try {
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤
    // –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    const mockHistory = Array.from({ length: 20 }, (_, i) => ({
      id: `request-${i + 1}`,
      prompt: `–ó–∞–ø–∏—Ç ${i + 1}: –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å –¥–ª—è ${['—ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ Google Drive', '–≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ Telegram', '–æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ API', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É', '–º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Å–∏—Å—Ç–µ–º–∏'][i % 5]}`,
      timestamp: new Date(Date.now() - i * 3600000).toISOString(),
      status: ['—É—Å–ø—ñ—à–Ω–æ', '—É—Å–ø—ñ—à–Ω–æ', '—É—Å–ø—ñ—à–Ω–æ', '–ø–æ–º–∏–ª–∫–∞', '–≤ –æ–±—Ä–æ–±—Ü—ñ'][i % 5],
      nodes: Math.floor(Math.random() * 10) + 1,
      model: ['gpt-4', 'claude-3-opus', 'claude-3-sonnet', 'gemini-pro', 'mistral-large'][i % 5]
    }));
    
    res.status(200).json({ success: true, data: mockHistory });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó' });
  }
});

app.get('/api/logs', (req, res) => {
  try {
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
    // –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    const mockLogs = {
      appLogs: Array.from({ length: 15 }, (_, i) => ({
        id: `log-${i + 1}`,
        timestamp: new Date(Date.now() - i * 600000).toISOString(),
        level: ['info', 'warning', 'error', 'debug'][i % 4],
        message: `–õ–æ–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${i + 1}: ${['–ó–∞–ø–∏—Ç –¥–æ API', '–û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö', '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è JSON', '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è', '–£—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è'][i % 5]}`,
        source: ['frontend', 'backend', 'api', 'system'][i % 4]
      })),
      apiLogs: Array.from({ length: 10 }, (_, i) => ({
        id: `api-log-${i + 1}`,
        timestamp: new Date(Date.now() - i * 900000).toISOString(),
        endpoint: ['/api/n8n/workflows', '/api/openrouter/models', '/api/chat/completion', '/api/templates'][i % 4],
        method: ['GET', 'POST', 'PUT', 'DELETE'][i % 4],
        status: [200, 201, 400, 404, 500][i % 5],
        duration: Math.floor(Math.random() * 1000) + 50,
        requestSize: Math.floor(Math.random() * 10000) + 100,
        responseSize: Math.floor(Math.random() * 20000) + 200
      }))
    };
    
    res.status(200).json({ success: true, data: mockLogs });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª–æ–≥—ñ–≤:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª–æ–≥—ñ–≤' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏
app.post('/api/settings/mode', (req, res) => {
  try {
    const { demoMode } = req.body;
    
    if (demoMode === undefined) {
      return res.status(400).json({ success: false, message: '–í—ñ–¥—Å—É—Ç–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏' });
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–≤ –±–∏ –∫–æ–¥ –¥–ª—è –∑–º—ñ–Ω–∏ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    // –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—É –≤ –ø–∞–º'—è—Ç—ñ
    process.env.DEMO_MODE = demoMode.toString();
    
    console.log(`–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${demoMode ? '–î–ï–ú–û' : '–ü–û–í–ù–ò–ô'}`);
    
    res.status(200).json({ 
      success: true, 
      message: `–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${demoMode ? '–¥–µ–º–æ' : '–ø–æ–≤–Ω–∏–π'}`,
      mode: demoMode ? 'demo' : 'full'
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏:', error);
    res.status(500).json({ success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏' });
  }
});

// –û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
// –¶–µ–π –∫–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö API –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∞–ª–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
app.use(express.static(path.join(__dirname, '../../frontend/dist')));

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ index.html —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å –∑ API –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
app.get('*', (req, res) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ API –∑–∞–ø–∏—Ç–∏
  if (req.path.startsWith('/api')) {
    return res.status(404).json({ error: 'API –º–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
  }
  // –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ index.html
  res.sendFile(path.join(__dirname, '../../frontend/dist/index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} –≤ ${DEMO_MODE ? '–î–ï–ú–û' : '–ü–û–í–ù–û–ú–£'} —Ä–µ–∂–∏–º—ñ`);
});

module.exports = app;
